import unittest
from unittest.mock import Mock

import numpy as np
import qiskit

from quantuminspire.qiskit.backend_qx import QiSimulatorPy


class TestQiCircuitToString(unittest.TestCase):

    def test_generate_cqasm_WithEntangleAlgorithm(self):
        QPS_SPECS = {
            'circuits': [{
                'name': 'entangle',
                'quantum_registers': [{'name': 'q', 'size': 2}],
                'classical_registers': [{'name': 'b', 'size': 2}]
            }]
        }
        program = qiskit.QuantumProgram(specs=QPS_SPECS)
        q = program.get_quantum_register('q')
        b = program.get_classical_register('b')

        circuit = program.get_circuit('entangle')
        circuit.h(q[0])
        circuit.cx(q[0], q[1])
        circuit.measure(q[0], b[0])
        circuit.measure(q[1], b[1])

        simulator = QiSimulatorPy(Mock())
        qiskit_job = qiskit.compile(circuit, simulator)
        compiled_circuit = qiskit_job['circuits'][0]['compiled_circuit']
        result = simulator._generate_cqasm(compiled_circuit)
        expected = "version 1.0\n" \
                   "# cqasm generated by QI backend for QisKit\n" \
                   "qubits 2\n" \
                   "H q[0]\n" \
                   "CNOT q[0], q[1]\n" \
                   ".measurement\n" \
                   "   measure q[0]\n" \
                   "   measure q[1]\n"
        self.assertEqual(result, expected)

    def test_generate_cqasm_CorrectOutputControlledNot(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'cx', 'qubits': [0, 1]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('CNOT q[0], q[1]\n' in result)

    def test_generate_cqasm_CorrectOutputToffoli(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 3},
            'operations': [{'name': 'ccx', 'qubits': [0, 1, 2]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('Toffoli q[0], q[1], q[2]\n' in result)

    def test_generate_cqasm_CorrectOutputMeasure(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 3},
            'operations': [{'name': 'measure', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        measure_line = '.measurement\n   measure q[0]\n   measure q[1]\n   measure q[2]\n'
        self.assertTrue(measure_line in result)

    def test_generate_cqasm_CorrectOutputHadamard(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'h', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('H q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputBarrier(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'barrier', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertFalse('barrier' in result)

    def test_generate_cqasm_CorrectOutputIdentity(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'id', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertFalse('id' in result)

    def test_generate_cqasm_CorrectOutputGateX(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'x', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('X q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputGateY(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'y', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('Y q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputGateZ(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'z', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('Z q[0]\n' in result)

    def test_generate_cqasm_CorrectOutputGateU(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u', 'qubits': [0], 'params': [0, 0, np.pi/2]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('S q[0]\n' in result)

        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u', 'qubits': [0], 'params': [0, 0, -np.pi/2]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('Sdag q[0]\n' in result)

    def test_generate_cqasm_RaisesErrorGateU(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u', 'qubits': [0], 'params': [0, 0, 0]}]
        }
        self.assertRaises(ValueError, simulator._generate_cqasm, compiled_circuits)

    def test_generate_cqasm_CorrectOutputGateU0(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u0', 'qubits': [0]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertFalse('U0' in result)

    def test_generate_cqasm_CorrectOutputGateU1(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u1', 'qubits': [0], 'params': [np.pi/2]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('S q[0]\n' in result)

        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u1', 'qubits': [1], 'params': [np.pi/4]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('T q[1]\n' in result)

        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u1', 'qubits': [2], 'params': [-np.pi/4]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('Tdag q[2]\n' in result)

    def test_generate_cqasm_RaisesErrorGateU1(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u1', 'qubits': [2], 'params': [42]}]
        }
        self.assertRaises(ValueError, simulator._generate_cqasm, compiled_circuits)

    def test_generate_cqasm_CorrectOutputGateU2(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u2', 'qubits': [0], 'params': [np.pi]}]
        }
        self.assertRaises(ValueError, simulator._generate_cqasm, compiled_circuits)

    def test_generate_cqasm_CorrectoutputU3(self):
        simulator = QiSimulatorPy(Mock())
        compiled_circuits = {
            'header': {'number_of_qubits': 2},
            'operations': [{'name': 'u3', 'qubits': [0], 'params': [1, 2, 3]}]
        }
        result = simulator._generate_cqasm(compiled_circuits)
        self.assertTrue('Rz q[0], 1.000000\nRy q[0], 2.000000\nRz q[0], 3.000000\n' in result)
