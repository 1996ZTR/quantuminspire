# -*- coding: utf-8 -*-
""" Example to use the Quantum Inspire API from python

@author: eendebakpt
"""

"""
#%%
import requests
from requests.auth import HTTPBasicAuth
import uuid
import time

import quantuminspire.qitools
from imp import reload
reload(quantuminspire.qitools)
passwd=None

#%% Core API interface
# use coreapi instead of requests?
#https://github.com/core-api/python-client

if 0:
    import coreapi
    
    auth = coreapi.auth.BasicAuthentication(username='peendebak', password=passwd)
    
    # Initialize a client & load the schema document
    client = coreapi.Client(auth=auth)
    schema = client.get("https://dev.quantum-inspire.com/api/schema")
    
    # Interact with the API endpoint
    action = ["projects", "list"]
    result = client.action(schema, action)
    print(result)

#%%
from quantuminspire.qitools import QuantumInspireAPI
from quantuminspire.qiskit.qiskit_backend import QiSimulatorPy
from getpass import getpass
            
server = r'https://dev.quantum-inspire.com/api'
server = r'https://api.quantum-inspire.com/'
#server = r'https://preview.quantum-inspire.com/api'

try:
    username
    passwd
except:
    print('Enter username')
    username = input();
    print('Enter password')
    passwd = getpass();
                    
auth = HTTPBasicAuth(username, passwd)
qi = QuantumInspireAPI(server, auth)  
self=qi

print('# available backends:')
b=qi.list_backends()

print('# available projects:')
pp=qi.list_projects()

print('# available results:')
j=qi.list_results()

print('# available jobs:')
j=qi.list_jobs()

backend_type=b[0]['type'] # 'simulate single node QuTechâ€™ 

qasm='''version 1.0

qubits 2

H q[0] 
CNOT q[0], q[1] 
display 
measure q[0]
'''

r=qi.execute_qasm(qasm, number_of_shots=128)


#%%
import quantuminspire.qiskit.qiskit_backend
from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister, QISKitError #, QuantumJob
from qiskit import available_backends, execute, register, get_backend, compile
import pdb

n=2
q = QuantumRegister(n)
qc = QuantumCircuit(q)
qc.h(q[0])
qc.cx(q[0], q[1])        
        

reload(quantuminspire.qiskit.qiskit_backend)
from quantuminspire.qiskit.qiskit_backend import QiSimulatorPy
backend=QiSimulatorPy(qi_api=qi)    
j=execute(qc, backend)

#%%
import uuid
import time

verbose=1

qasm='''version 1.0

qubits 2

H q[0] 
CNOT q[0], q[1] 
display 
measure q[0]
'''


if 1:
    def execute_qasm(self, qasm, verbose=1):
        # create a project
        pname='qi-tmpproject-%s' % str(uuid.uuid1())
        jname='qi-tmpjob-%s' % str(uuid.uuid1())
        
        payload={'name': pname, 'number_of_shots': 256}
        r = self._request_post(server+'/projects/', data=payload)
        pr = r.json()
        self.debug_result(r)
        
        # create asset
        aname='qi-tmpasset-%s' % str(uuid.uuid1())
        payload={'name': aname, 'contentType': 'text/plain', 'project': pr['url'], 'content': qasm}
        ra = self._request_post(server+'/assets/', data=payload)
        asset=ra.json()
        if verbose>=2:
            print(asset)

        # create job
        payload={'name': jname, 'input': asset['url'], 'backend_type': pr['backend_type'], 'status': 'NEW', 'number_of_shots': 256}
        #payload['backend']='https://dev.quantum-inspire.com/api/backends/1/'
        #payload['backend']=''
        print(payload)

        jobr = self._request_post(server+'/jobs/', data=payload)
        job=jobr.json()
        
        for ii in range(100):
            time.sleep(.5)
            x = self._request(server+'/jobs/%d' % job['id'])
            jx=x.json()
            if jx['status']=='COMPLETE':
                break
            if verbose:
                print('waiting for result of job %s' % (job['id'],))

        # get results

        results = self._request(jx['results'])
        results=results.json()
            
        # delete stuff
        try:
            x1 = self._request_delete(server+'/assets/%d' % asset['id'])
            x2 = self._request_delete(server+'/projects/%d' % pr['id'])
        except:
            pass
        return results

results=execute_qasm(self, qasm, verbose=1)

#%%
        
j=qi.list_jobs(verbose=0)
for x in j:
    print('job %s: %s' % (x['name'],x['status']))
    
#%%
qasm='''version 1.0

qubits 2

H q[0] 
CNOT q[0], q[1] 
display 
measure q[0]
'''
qasm='''
version 1.0
# cqasm generated by QI backend for QisKit
qubits 2
H q[0]
CX q[0], q[1]
S q[1]]
# measure
measure q[0,1]
'''
assets=qi._request(pp[1]['assets']).json()
asset=qi._request(assets[-1]['url']).json()
print('running asset %s (%s)' % (asset['name'], asset['url']) )


#%%

print(j[0])

payload={'name': 'testjob', 'input': asset['url'], 'backend_type': backend_type, 'status': 'NEW', 'number_of_shots': 1024}
#payload['backend']='https://dev.quantum-inspire.com/api/backends/1/'
#payload['backend']=''
print(payload)

r = self._request_post(server+'/jobs/', data=payload)

print(r.text)

#%% TODO: qasm to job result (with timeout)
#%% TODO: connection to qiskit

#%% Debug error result
import tempfile

tfile = tempfile.mktemp(suffix='.html')
with open(tfile, 'wt') as fid:
    fid.write(r.text)
    
import webbrowser
webbrowser.open_new(tfile)
"""